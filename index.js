import express from 'express';
import jwt from 'jsonwebtoken';
import bcrypt from 'bcrypt';
import mongoose from 'mongoose';
import {validationResult} from 'express-validator';
import {registerValidation} from './validations/auth.js';
import UserModel from './modules/user.js';
import checkAuth from './utils/checkAuth.js';

// –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–¥
mongoose.connect(
    `mongodb+srv://admin:wwwwww@cluster0.4wpjunr.mongodb.net/blog?retryWrites=true&w=majority`).
    then(() => {
      console.log('db ok');
    }).
    catch((err) => {
      console.log(err);
    });

// –ú–µ—Ç–æ–¥ –æ–±—å–µ—Ç–∞ express. –° –ø–æ–º–æ—â—å—é –Ω–µ–≥–æ –º—ã –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ –∫–æ–Ω–µ—á–Ω—ã–µ —Ç–æ—á–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Ç–≤–µ—á–∞—é—Ç
// –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–æ–≤
const app = express();

app.use(express.json()); // –ø–æ–∑–≤–æ–ª—è–µ—Ç —á–∏—Ç–∞—Ç—å json

app.post('/auth/register', registerValidation, async (request, response) => {
  try {
    const errors = validationResult(request);

    if (!errors.isEmpty()) {
      return response.status(400).json(errors.array());
    }

    const password = request.body.password;
    const salt = await bcrypt.genSalt(10); // –∞–ª–≥–æ—Ä–∏—Ç–º —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
    const hash = await bcrypt.hash(password, salt); // —à–∏—Ñ—Ä—É–µ–º –ø–∞—Ä–æ–ª—å

    const document = new UserModel({
      email: request.body.email,
      fullName: request.body.fullName,
      avatarUrl: request.body.avatarUrl,
      passwordHash: hash,
    });

    const user = await document.save();

    const token = await jwt.sign({
          _id: user._id,
        },
        'secret123',
        {
          expiresIn: '30d',
        });

    const {passwordHash, ...userData} = user._doc;

    response.json({...userData, token});
  } catch (e) {
    response.json({
      message: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è ${e}`,
    });
  }
});

app.post('/auth/login', async (req, res) => {
  try {
    // –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ email
    const user = await UserModel.findOne({email: req.body.email});
    // –Ω–∞ –ø—Ä–æ–¥–µ –Ω–µ–ª—å–∑—è —É–∫–∞–∑—ã–≤–∞—Ç—å –∏–∑ –∑–∞ —á–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    if (!user) {
      // –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–¥
      return res.status(404).json({message: '–ü–æ–ª–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'});
    }
    ;

    const isValidPass = await bcrypt.compare(req.body.password,
        user._doc.passwordHash);

    if (!isValidPass) {
      return res.status(404).json({message: '–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å'});
    }
    ;

    const token = await jwt.sign(
        {_id: user._id},
        'secret123',
        {expiresIn: '30d'},
    );

    const {passwordHash, ...userData} = user._doc;

    res.json({...userData, token});
  } catch (e) {
    console.log(e);
    res.status(500).json({message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'});
  }
});

app.get('/auth/me', checkAuth, async (req, res) => {
  // –ó–¥–µ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –Ω–∞—à —Ç–æ–∫–µ–Ω
  // checkAuth —Ä–µ—à–∞–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª–∏ –∫–æ–¥ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∑–¥–µ—Å—å
  try {
    const user = await UserModel.findById(req.userId);

    if (!user) {
      return res.status(404).json({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
      });
    }

    console.log(user._doc)


    // üëø error next line...
    res.json({...user._doc});
  } catch (err) {
    return res.status(500).json({
      message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞',
    });
  }
});

app.listen(5555, (err) => { // –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä
  if (err) {
    return console.log(err);
  }

  console.log('server ok');
});
